type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.*;\n\npublic class CoffeeMachine {\n\
    \    final static int waterBase = 200;\n    final static int milkBase = 50;\n\
    \    final static int beansBase = 15;\n    final static int waterCap = 400;\n\
    \    final static int milkCap = 540;\n    final static int beansCap = 120;\n \
    \   final static int cupsCap = 9;\n    static int moneyBank = 550;\n\n    public\
    \ static void main(String[] args) {\n        System.out.println(\"The coffee machine\
    \ has:\");\n        System.out.println(\"400 of water\");\n        System.out.println(\"\
    540 of milk\");\n        System.out.println(\"120 of coffee beans\");\n      \
    \  System.out.println(\"9 of disposable cups\");\n        System.out.println(\"\
    550 of money\");\n        \n        \n        Scanner sc = new Scanner(System.in);\n\
    \        System.out.println(\"Write action (buy, fill, take): \");\n        String\
    \ action = sc.next();\n        switch (action) {\n            case \"buy\":\n\
    \                System.out.println(\"What do you want to buy? 1 - espresso, 2\
    \ - latte, 3 - cappuccino: \");\n                int type = sc.nextInt();\n  \
    \              dispenseCoffee(1, type);\n                break;\n            case\
    \ \"fill\":\n                fillUp();\n                break;\n            case\
    \  \"take\":\n                takeMoney();\n                break;\n         \
    \   default:\n                System.out.println(\"No,\_I\_can\_make\_only\_0\
    \ cup(s)\_of\_coffee\");\n                break;\n        }\n\n\n        /*System.out.println(\"\
    Write how many ml of water the coffee machine has: \");\n        int waterCap\
    \ = sc.nextInt();\n        System.out.println(\"Write how many ml of milk the\
    \ coffee machine has: \");\n        int milkCap = sc.nextInt();\n        System.out.println(\"\
    Write how many grams of coffee beans the coffee machine has: \");\n        int\
    \ beansCap = sc.nextInt();*/\n\n\n        /*System.out.println(\"Write how many\
    \ cups of coffee you will need: \");\n        int demandCups = sc.nextInt();\n\
    \        int waterDemand = demandCups * waterBase;\n        int milkDemand = demandCups\
    \ * milkBase;\n        int beanDemand = demandCups * beansBase;\n        int totalPossible\
    \ = totalCups(waterCap, milkCap, beansCap);\n\n\n\n\n        if ((waterDemand\
    \ > waterCap)\n            || (milkDemand > milkCap)\n            || (beanDemand\
    \ > beansCap)) {\n            System.out.println(\"No, I can make only \" + totalPossible\
    \ +\" cup(s) of coffee\");\n        } else if ((waterDemand <= waterCap)\n   \
    \             && (milkDemand <= milkCap)\n                && (beanDemand <= beansCap))\
    \ {\n            int cupsLeftOver = totalPossible - demandCups;\n            if\
    \ (cupsLeftOver >= 1) {\n                System.out.print(\"Yes, I can make that\
    \ amount of coffee\");\n                System.out.println(\" (and even \" +cupsLeftOver\
    \ +\" more than that)\");\n            } else {\n                System.out.println(\"\
    Yes, I can make that amount of coffee\");\n            }\n        }*/\n      \
    \  \n    }\n\n    static int totalCups(int waterCap, int milkCap, int beansCap)\
    \ {\n        int wCount = waterCap / waterBase;\n        int mCount = milkCap\
    \ / milkBase;\n        int bCount = beansCap / beansBase;\n        Set<Integer>\
    \ col = new HashSet(Arrays.asList(wCount, mCount, bCount));\n        return Collections.min(col);\n\
    \    }\n\n    static void dispenseCoffee(int unit, int type) {\n        int waterLeft\
    \ = waterCap - Coffee.valueOfType(type).waterDemand;\n        int milkLeft = milkCap\
    \ - Coffee.valueOfType(type).milkDemand;\n        int beansLeft = beansCap - Coffee.valueOfType(type).beansDemand;\n\
    \        int cupsLeft = cupsCap - unit;\n        int moneyEarned = moneyBank +\
    \ Coffee.valueOfType(type).dollarAmt;\n\n        displayResults(waterLeft, milkLeft,\
    \ beansLeft, cupsLeft, moneyEarned);\n\n    }\n\n    static void takeMoney() {\n\
    \        moneyBank = 0;\n        System.out.println(\"I gave you $\" +moneyBank);\n\
    \n        System.out.println();\n        displayResults(waterCap, milkCap, beansCap,\
    \ cupsCap, moneyBank);\n    }\n\n    static void fillUp () {\n        Scanner\
    \ sc = new Scanner(System.in);\n        System.out.println(\"Write how many ml\
    \ of water do you want to add: \");\n        int waterUpdated = sc.nextInt() +\
    \ waterCap;\n        System.out.println(\"Write how many ml of milk do you want\
    \ to add: \");\n        int milkUpdated = sc.nextInt() + milkCap;\n        System.out.println(\"\
    Write how many grams of coffee beans do you want to add: \");\n        int beansUpdated\
    \ = sc.nextInt() + beansCap;\n        System.out.println(\"Write how many disposable\
    \ cups of coffee do you want to add:\");\n        int cupsUpdated = sc.nextInt()\
    \ + cupsCap;\n\n        displayResults(waterUpdated, milkUpdated, beansUpdated,\
    \ cupsUpdated, moneyBank);\n    }\n\n    static void displayResults(int water,\
    \ int milk, int beans, int cups, int money) {\n        System.out.println(\"The\
    \ coffee machine has:\");\n        System.out.println(water + \" of water\");\n\
    \        System.out.println(milk + \" of milk\");\n        System.out.println(beans\
    \ + \" of coffee beans\");\n        System.out.println(cups + \" of disposable\
    \ cups\");\n        System.out.println(money + \" of money\");\n    }\n\n    public\
    \ static enum Coffee {\n        ESPRESSO(\"espresso\", 1, 250, 0, 16, 4),\n  \
    \      LATTE(\"latte\", 2, 350, 75, 20, 7 ),\n        CAPPUCCINO(\"cappuccino\"\
    , 3, 200, 100, 12, 6);\n\n        private static final Map<String, Coffee> BY_LABEL\
    \ = new HashMap<>();\n        private static final Map<Integer, Coffee> BY_TYPE\
    \ = new HashMap<>();\n        private static final Map<Integer, Coffee> BY_WATER_DEMAND\
    \ = new HashMap<>();\n        private static final Map<Integer, Coffee> BY_MILK_DEMAND\
    \ = new HashMap<>();\n        private static final Map<Integer, Coffee> BY_BEANS_DEMAND\
    \ = new HashMap<>();\n        private static final Map<Integer, Coffee> BY_DOLLAR_AMT\
    \ = new HashMap<>();\n\n        static {\n            for (Coffee e : values())\
    \ {\n                BY_LABEL.put(e.label, e);\n                BY_TYPE.put(e.type,\
    \ e);\n                BY_WATER_DEMAND.put(e.waterDemand, e);\n              \
    \  BY_MILK_DEMAND.put(e.milkDemand, e);\n                BY_BEANS_DEMAND.put(e.beansDemand,\
    \ e);\n                BY_DOLLAR_AMT.put(e.dollarAmt, e);\n            }\n   \
    \     }\n\n        public final String label;\n        public final int type;\n\
    \        public final int waterDemand;\n        public final int milkDemand;\n\
    \        public final int beansDemand;\n        public final int dollarAmt;\n\n\
    \        private Coffee(String label, int type, int waterDemand, int milkDemand,\
    \ int beansDemand, int dollarAmt) {\n            this.label = label;\n       \
    \     this.type = type;\n            this.waterDemand = waterDemand;\n       \
    \     this.milkDemand = milkDemand;\n            this.beansDemand = beansDemand;\n\
    \            this.dollarAmt = dollarAmt;\n        }\n\n        public static Coffee\
    \ valueOfLabel(String label) {\n            return BY_LABEL.get(label);\n    \
    \    }\n\n        public static Coffee valueOfType(int type) {\n            return\
    \ BY_TYPE.get(type);\n        }\n\n        public static Coffee valueOfWaterDemand(int\
    \ waterDemand) {\n            return BY_WATER_DEMAND.get(waterDemand);\n     \
    \   }\n\n        public static Coffee valueOfMilkDemand(int milkDemand) {\n  \
    \          return BY_MILK_DEMAND.get(milkDemand);\n        }\n\n        public\
    \ static Coffee valueOfBeansDemand(int beansDemand) {\n            return BY_BEANS_DEMAND.get(beansDemand);\n\
    \        }\n\n        public static Coffee valueOfDollarAmt(int dollarAmt) {\n\
    \            return BY_DOLLAR_AMT.get(dollarAmt);\n        }\n\n\n    }\n\n}\n\
    \n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
